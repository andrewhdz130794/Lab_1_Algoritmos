hiperparametros = I(list()),
rmse_registro = numeric(),
variables_incluidas = I(list()),
etiqueta_modelo = character(),
stringsAsFactors = FALSE
)
results <- rbind(results, data.frame(
id = 1,
modelo = "Lineal Multiple",
hiperparametros = I(list(data.frame())),
rmse_registro = min(lm1$results$RMSE),
variables_incluidas = I(list("Todas")),
etiqueta_modelo = "Champion",
stringsAsFactors = FALSE
))
results
results <- rbind(results, data.frame(
id = 2,
modelo = "ridge_regression",
hiperparametros = I(list(ridge_regression$bestTune)),
rmse_registro = bestRMSE_Ridge,
variables_incluidas = I(list('Todas')),
etiqueta_modelo = "Depricated",
stringsAsFactors = FALSE
))
results$variables_incluidas
#Dataframe para guardar los resultados
results <- data.frame(
id = numeric(),
modelo = character(),
hiperparametros = I(list()),
rmse_registro = numeric(),
variables_incluidas = I(list()),
etiqueta_modelo = character(),
stringsAsFactors = FALSE
)
results <- rbind(results, data.frame(
id = 1,
modelo = "Lineal Multiple",
hiperparametros = I(list(data.frame())),
rmse_registro = min(lm1$results$RMSE),
variables_incluidas = I(list("Todas")),
etiqueta_modelo = "Champion",
stringsAsFactors = FALSE
))
results
results <- rbind(results, data.frame(
id = 2,
modelo = "ridge_regression",
hiperparametros = I(list(ridge_regression$bestTune)),
rmse_registro = bestRMSE_Ridge,
variables_incluidas = I(list('Todas')),
etiqueta_modelo = "Depricated",
stringsAsFactors = FALSE
))
results
results <- rbind(results, data.frame(
id = 3,
modelo = "lasso_regression",
hiperparametros = I(list(lasso_regression$bestTune)),
rmse_registro = bestRMSE_LS,
variables_incluidas = I(list('Todas')),
etiqueta_modelo = "Challenger",
stringsAsFactors = FALSE
))
results
summary( elasticNet_regression)
plot(elasticNet_regression)
plot(varImp(elasticNet_regression, scale=TRUE))
bestRMSE<-min(elasticNet_regression$results$RMSE)
bestRMSE
elasticNet_regression$bestTune
results <- rbind(results, data.frame(
id = 2,
modelo = "elasticNet_regression",
hiperparametros = I(list(elasticNet_regression$bestTune)),
rmse_registro = bestRMSE,
variables_incluidas = I(list('Todas')),
etiqueta_modelo = "Depricated",
stringsAsFactors = FALSE
))
results
results <- rbind(results, data.frame(
id = 3,
modelo = "stepwise_model",
hiperparametros = I(list(data.frame())),
rmse_registro = best_rmse,
variables_incluidas = I(list(variables_utilizadas)),
etiqueta_modelo = "Challenger",
stringsAsFactors = FALSE
))
results
results <- results %>%
arrange(rmse_registro)
print(results)
#Dataframe para guardar los resultados
results <- data.frame(
id = numeric(),
modelo = character(),
hiperparametros = I(list()),
rmse_registro = numeric(),
variables_incluidas = I(list()),
etiqueta_modelo = character(),
stringsAsFactors = FALSE
)
results <- rbind(results, data.frame(
id = 1,
modelo = "Lineal Multiple",
hiperparametros = I(list(data.frame())),
rmse_registro = min(lm1$results$RMSE),
variables_incluidas = I(list("Todas")),
etiqueta_modelo = "Champion",
stringsAsFactors = FALSE
))
results
results <- rbind(results, data.frame(
id = 2,
modelo = "ridge_regression",
hiperparametros = I(list(ridge_regression$bestTune)),
rmse_registro = bestRMSE_Ridge,
variables_incluidas = I(list('Todas')),
etiqueta_modelo = "Depricated",
stringsAsFactors = FALSE
))
results
results <- rbind(results, data.frame(
id = 3,
modelo = "lasso_regression",
hiperparametros = I(list(lasso_regression$bestTune)),
rmse_registro = bestRMSE_LS,
variables_incluidas = I(list('Todas')),
etiqueta_modelo = "Challenger",
stringsAsFactors = FALSE
))
results
results <- rbind(results, data.frame(
id = 4,
modelo = "elasticNet_regression",
hiperparametros = I(list(elasticNet_regression$bestTune)),
rmse_registro = bestRMSE,
variables_incluidas = I(list('Todas')),
etiqueta_modelo = "Depricated",
stringsAsFactors = FALSE
))
results
results <- rbind(results, data.frame(
id = 5,
modelo = "stepwise_model",
hiperparametros = I(list(data.frame())),
rmse_registro = best_rmse,
variables_incluidas = I(list(variables_utilizadas)),
etiqueta_modelo = "Challenger",
stringsAsFactors = FALSE
))
results
results <- results %>%
arrange(rmse_registro)
print(results)
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
write.csv(results, "resultados_modelo.csv", row.names = FALSE)
print(results)
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
source("~/Universidad/T2/R/clase2/Lab 4/Lab_4.Rmd")
View(best_model)
View(stepwise_model)
library(data.table)
library(caret)
library(dplyr)
library(xgboost)
install.packages("xgboost")
library(data.table)
library(caret)
library(dplyr)
library(xgboost)
library(data.table)
library(caret)
library(dplyr)
library(xgboost)
library(data.table)
library(caret)
library(dplyr)
library(xgboost)
train<-read.csv("train.csv")
head(train)
test<-read.csv("test.csv")
head(test)
test<-read.csv("test.csv")
head(test)
# Verificar valores nulos en train
sapply(train, function(x) sum(is.na(x)))
# Verificar valores nulos en test
sapply(test, function(x) sum(is.na(x)))
train$total_bedrooms[is.na(train$total_bedrooms)] <- median(train$total_bedrooms, na.rm = TRUE)
test$total_bedrooms[is.na(test$total_bedrooms)] <- median(test$total_bedrooms, na.rm = TRUE)
train <- dummyVars(" ~ .", data = train) %>%
predict(newdata = train) %>%
as.data.frame()
test <- dummyVars(" ~ .", data = test) %>%
predict(newdata = test) %>%
as.data.frame()
train_y <- train$median_house_value
train_x <- train %>% select(-median_house_value)
dtrain <- xgb.DMatrix(data = as.matrix(train_x), label = train_y)
dtest <- xgb.DMatrix(data = as.matrix(test))
params <- list(
objective = "reg:squarederror",
eval_metric = "rmse"
)
set.seed(123)
model <- xgb.train(params = params, data = dtrain, nrounds = 100)
predictions <- predict(model, dtest)
predictions <- predict(model, dtest)
head(predictions)
results <- data.frame(id = test$id, median_house_value = predictions)
results
write.csv(results, "boost.csv", row.names = FALSE)
print(results)
k<-17
lm17<-dtrPr %>%
lm(formula = median_house_value ~
splines::bs(median_income_std,350) +
splines::bs(total_rooms_std,350 ) +
splines::bs(housing_median_age,15) +
splines::bs(total_bedrooms_std,350)  +
splines::bs(households_std,350)  +
splines::bs(population,300) +
splines::bs(ocean_proximity,4) +
splines::bs(longitude,100) +
splines::bs(latitude,50)
)
test
train
sapply(train, function(x) sum(is.na(x)))
sapply(test, function(x) sum(is.na(x)))
train$total_rooms_per_household <- train$total_rooms / train$households
train$bedrooms_per_room <- train$total_bedrooms / train$total_rooms
train$population_per_household <- train$population / train$households
train
test$total_rooms_per_household <- test$total_rooms / test$households
test$bedrooms_per_room <- test$total_bedrooms / test$total_rooms
test$population_per_household <- test$population / test$households
test
train_y <- train$median_house_value
train_x <- train %>% select(-median_house_value)
# Convertir a matrices para XGBoost
dtrain <- xgb.DMatrix(data = as.matrix(train_x), label = train_y)
dtrain
params <- list(
objective = "reg:squarederror",
eval_metric = "rmse"
)
params
set.seed(123)
cv_results <- xgb.cv(
params = params,
data = dtrain,
nrounds = 100,
nfold = 5,
verbose = TRUE,
early_stopping_rounds = 10,
maximize = FALSE
)
cv_results
print(cv_results)
best_nrounds <- cv_results$best_iteration
model <- xgb.train(
params = params,
data = dtrain,
nrounds = best_nrounds
)
dtest <- xgb.DMatrix(data = as.matrix(test %>% select(-id)))
predictions <- predict(model, dtest)
results <- data.frame(id = test$id, median_house_value = predictions)
dtest <- xgb.DMatrix(data = as.matrix(test %>% select(-id)))
predictions <- predict(model, dtest)
train_y <- train$median_house_value
train_x <- train %>% select(-median_house_value)
dtrain <- xgb.DMatrix(data = as.matrix(train_x), label = train_y)
dtrain
train$total_rooms_per_household <- train$total_rooms / train$households
train$bedrooms_per_room <- train$total_bedrooms / train$total_rooms
train$population_per_household <- train$population / train$households
train
test$total_rooms_per_household <- test$total_rooms / test$households
test$bedrooms_per_room <- test$total_bedrooms / test$total_rooms
test$population_per_household <- test$population / test$households
test
test$total_rooms_per_household <- test$total_rooms / test$households
test$bedrooms_per_room <- test$total_bedrooms / test$total_rooms
test$population_per_household <- test$population / test$households
test
train<-read.csv("train.csv")
head(train)
test<-read.csv("test.csv")
head(test)
sapply(train, function(x) sum(is.na(x)))
sapply(test, function(x) sum(is.na(x)))
train$total_bedrooms[is.na(train$total_bedrooms)] <- median(train$total_bedrooms, na.rm = TRUE)
test$total_bedrooms[is.na(test$total_bedrooms)] <- median(test$total_bedrooms, na.rm = TRUE)
train <- dummyVars(" ~ .", data = train) %>%
predict(newdata = train) %>%
as.data.frame()
train
test <- dummyVars(" ~ .", data = test) %>%
predict(newdata = test) %>%
as.data.frame()
test
sapply(train, function(x) sum(is.na(x)))
sapply(test, function(x) sum(is.na(x)))
train_y <- train$median_house_value
train_x <- train %>% select(-median_house_value)
dtrain <- xgb.DMatrix(data = as.matrix(train_x), label = train_y)
dtest <- xgb.DMatrix(data = as.matrix(test))
params <- list(
objective = "reg:squarederror",
eval_metric = "rmse"
)
train_y <- train$median_house_value
train_x <- train %>% select(-median_house_value)
dtrain <- xgb.DMatrix(data = as.matrix(train_x), label = train_y)
dtest <- xgb.DMatrix(data = as.matrix(test))
params <- list(
objective = "reg:squarederror",
eval_metric = "rmse"
)
set.seed(123)
model <- xgb.train(params = params, data = dtrain, nrounds = 100)
predictions <- predict(model, dtest)
head(predictions)
results <- data.frame(id = test$id, median_house_value = predictions)
results
write.csv(results, "boost.csv", row.names = FALSE)
print(results)
train$total_rooms_per_household <- train$total_rooms / train$households
train$bedrooms_per_room <- train$total_bedrooms / train$total_rooms
train$population_per_household <- train$population / train$households
train
test$total_rooms_per_household <- test$total_rooms / test$households
test$bedrooms_per_room <- test$total_bedrooms / test$total_rooms
test$population_per_household <- test$population / test$households
test
train<-read.csv("train.csv")
head(train)
test<-read.csv("test.csv")
head(test)
sapply(train, function(x) sum(is.na(x)))
sapply(test, function(x) sum(is.na(x)))
train$total_bedrooms[is.na(train$total_bedrooms)] <- median(train$total_bedrooms, na.rm = TRUE)
test$total_bedrooms[is.na(test$total_bedrooms)] <- median(test$total_bedrooms, na.rm = TRUE)
train <- dummyVars(" ~ .", data = train) %>%
predict(newdata = train) %>%
as.data.frame()
train
test <- dummyVars(" ~ .", data = test) %>%
predict(newdata = test) %>%
as.data.frame()
test
test
sapply(train, function(x) sum(is.na(x)))
sapply(test, function(x) sum(is.na(x)))
train_y <- train$median_house_value
train_x <- train %>% select(-median_house_value)
dtrain <- xgb.DMatrix(data = as.matrix(train_x), label = train_y)
dtest <- xgb.DMatrix(data = as.matrix(test))
params <- list(
objective = "reg:squarederror",
eval_metric = "rmse"
)
set.seed(123)
model <- xgb.train(params = params, data = dtrain, nrounds = 100)
predictions <- predict(model, dtest)
head(predictions)
results <- data.frame(id = test$id, median_house_value = predictions)
results
test
train
shiny::runApp('Universidad/T3/algoritmos/Lab_1_Algoritmos')
runApp('Universidad/T3/algoritmos/Lab_1_Algoritmos')
reticulate::repl_python()
# -*- coding: utf-8 -*-
quit
runApp('Universidad/T3/algoritmos/Lab_1_Algoritmos')
runApp('Universidad/T3/algoritmos/Lab_1_Algoritmos')
reticulate::repl_python()
import pandas
reticulate::repl_python()
strOut = str_equ.replace("x", '*(x + 2*h)')
strOut = strOut.replace("^", "**")
out = out + eval(strOut)
strOut = str_equ.replace("x", '*(x)')
strOut = strOut.replace("^", "**")
import pandas
import re
import pandas
import re
#Evaluación REGREX
def evaluate_Fx(str_equ, valX):
x = valX
#strOut = str_equ
strOut = str_equ.replace("x", '*(x)')
strOut = strOut.replace("^", "**")
out = eval(strOut)
print(strOut)
return out
#Deferencias finitas para derivadas
def evaluate_derivate_fx(str_equ, x, h):
strOut = str_equ.replace("x", '*(x + h)')
strOut = strOut.replace("^", "**")
strOut = "-4*(" + strOut + ")"
out = eval(strOut)
strOut = str_equ.replace("x", '*(x + 2*h)')
strOut = strOut.replace("^", "**")
out = out + eval(strOut)
strOut = str_equ.replace("x", '*(x)')
strOut = strOut.replace("^", "**")
strOut = "3*(" + strOut + ")"
out = out + eval(strOut)
out = -out/(2*h)
print(out)
return out
#Resolverdor de Newton
def newtonSolverX(x0, f_x, eps):
x0 = float(x0)
eps = float(eps)
xn = x0
error = 1
arrayIters = []
arrayF_x = []
arrayf_x = []
arrayXn = []
arrayErr = []
i = 0
h = 0.000001
while(error > eps):
print("...")
x_n1 = xn - (evaluate_Fx(f_x, xn)/evaluate_derivate_fx(f_x, xn, h))
error = abs(x_n1 - xn)
i = i + 1
xn = x_n1
arrayIters.append(i)
arrayXn.append(xn)
arrayErr.append(error)
solution = [i, xn, error]
print("Finalizo...")
TableOut = pandas.DataFrame({'Iter':arrayIters, 'Xn':arrayXn, 'Error': arrayErr})
return TableOut
def add(a, b):
a = int(a)
b = int(b)
resultado = a + b
return "El resultado es: " + str(resultado)
:q
quit
shiny::runApp('Universidad/T3/algoritmos/demo1')
shiny::runApp('Universidad/T3/algoritmos/demo1')
install.packages("fastmap")
shiny::runApp('Universidad/T3/algoritmos/demo1')
runApp('Universidad/T3/algoritmos/demo1')
runApp('Universidad/T3/algoritmos/Lab_1_Algoritmos')
runApp('Universidad/T3/algoritmos/Lab_1_Algoritmos')
reticulate::repl_python()
quit
runApp('Universidad/T3/algoritmos/Lab_1_Algoritmos')
runApp('Universidad/T3/algoritmos/demo1')
runApp('Universidad/T3/algoritmos/demo1')
runApp('Universidad/T3/algoritmos/demo1')
reticulate::repl_python()
if fa * fxk < 0:
quit
runApp('Universidad/T3/algoritmos/demo1')
:q
quit
runApp('Universidad/T3/algoritmos/demo1')
runApp('Universidad/T3/algoritmos/demo1')
runApp('Universidad/T3/algoritmos/demo1')
runApp('Universidad/T3/algoritmos/demo1')
runApp('Universidad/T3/algoritmos/demo1')
reticulate::repl_python()
strOut = strOut.replace("e^", "math.exp")
strOut = strOut.replace("e^", "math.exp")
quit
runApp('Universidad/T3/algoritmos/demo1')
